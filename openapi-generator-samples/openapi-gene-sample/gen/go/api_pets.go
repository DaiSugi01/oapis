/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PetsApiController binds http requests to an api service and writes the service results to the http response
type PetsApiController struct {
	service PetsApiServicer
	errorHandler ErrorHandler
}

// PetsApiOption for how the controller is set up.
type PetsApiOption func(*PetsApiController)

// WithPetsApiErrorHandler inject ErrorHandler into controller
func WithPetsApiErrorHandler(h ErrorHandler) PetsApiOption {
	return func(c *PetsApiController) {
		c.errorHandler = h
	}
}

// NewPetsApiController creates a default api controller
func NewPetsApiController(s PetsApiServicer, opts ...PetsApiOption) Router {
	controller := &PetsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PetsApiController
func (c *PetsApiController) Routes() Routes {
	return Routes{ 
		{
			"FindPet",
			strings.ToUpper("Get"),
			"/pets",
			c.FindPet,
		},
		{
			"FindPetById",
			strings.ToUpper("Get"),
			"/pets/{id}",
			c.FindPetById,
		},
		{
			"FindPetWithQueryParam",
			strings.ToUpper("Get"),
			"/pets/query",
			c.FindPetWithQueryParam,
		},
	}
}

// FindPet - 
func (c *PetsApiController) FindPet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.FindPet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindPetById - 
func (c *PetsApiController) FindPetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt64Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.FindPetById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindPetWithQueryParam - 
func (c *PetsApiController) FindPetWithQueryParam(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam, err := parseInt64Parameter(query.Get("id"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.FindPetWithQueryParam(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
